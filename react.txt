nmp install -g create-react-app  yeni bir react dosyası yaratır

yeni bir react projesi için ilk cmd sonra create-react-app proje adı kodlar

önceki dosyaları açmak için ilk cd first-app/ sonra npm start
projeyi durdurmak için terminalden control+C yaparız

component 2 ye ayrılır class ve function. Function daha klasik işlemlerde kullanılırken class based daha gelişmiş işlemlerde kullanılır
mesela kullanıcının inputa yazdığı bir şeye cevap vereceksek
ya da bir ağa istek atmak istiyorsak: class based

jsx'e css özellikleri ekleme
<div style= {{ backgroundColor: 'red' }}></div>

htmlde ki class jsx de className olarak değişir

props: parent componentden child componente veri akışı sağlarız
<SingleComment name = 'sarah vb'  SingleComment/>
propsda ki name bölümü projeyle bir olmalı

propsa javascript değişkeni veya herhangi bir resim vermek istiyorsak küme parantezi kullanırız
propsu blog-posts projesinde yer verdim

JavaScript’te bir değer saklayacağımız zaman nasıl ki değişken oluşturmak için var-let-const tanımlamalarından
yararlanıyorsak, React componentlerinde de değer saklamak için state’ten yararlanırız

LİFECYCLE METOTLARI
constructor state oluşturur state değeri değiştirir let gibi
render oluşturduğumuz jsx elemanlarını döner
componentDidMount veri yükleme de veya api isteklerinde kullanılır
componentWillUnmount silme işlemlerinde kullanabiliriz

const [firstName, setFirstName] = useState('zehra') firstname zehra kısmı setFirstName kullanıcdan veri alacağımız kısım
bunu returnla div içinde dönerim geri
eğer ki  butona bastığımda farklı bir şey yapsın istiyorsam:
return(
<div>
    <div> {firstName}  </div>
    <div> <button onclick = {()=> {setFirstName("nuri bilge") }} > İSMİ DEĞİŞTİR </button></div>
</div>
)

return ifadesinin içinde birden fazla jsx elemanı yazamayız

fetch ve axios metodlarını API isteklerinde kullanırım

PROPS: BİR COMPONENTTEN DİĞERİNE TAŞINAN VERİLER(data, fonksiyon yani event)

useState hook'u kullanılarak bir component fonksiyonel hale getirilebilirken,
class componentlerinde state yönetimi için this.state ve this.setState() yöntemleri kullanılır.


display: initial; /* display özelliğini varsayılan değerine döndürür (yani block) */

gutterBottom= metin bloğunun altında bir miktar boşluk ekler ve bu da bloğun sonlanmasını daha belirgin hale getirir.
 Bu, özellikle bir dizi metin bloğu içeren bir sayfada,
 her bir metin bloğunun birbirinden daha belirgin bir şekilde ayrılmasını sağlamak için kullanışlıdır.

ELEVATİON özelliği, genellikle bir bileşenin stil tanımlamasında kullanılır
ve kağıdın veya kartın yükseklik seviyesini belirlemek için önemli bir rol oynar. 
Bu özellik, kullanıcının bir bileşenin ön planda 
veya arka planda olduğunu daha net bir şekilde görebilmesini sağlar.






<div className="App">
      {/* <Login />, */}
      <Signup />
    </div>